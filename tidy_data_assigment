library(data.table) # activate data.table package
library(dplyr) # actvate dplyr package

#download the data set
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile = "dataset.zip") # dowload the file from a website and rename the file "dataset" 


dir() # see workind directory 
unzip("dataset.zip") # unzip dataset


# Checking if folder exists
if (!file.exists("UCI HAR Dataset")) { 
  unzip(filename) 
}


# get an understaning and assigming all provided data
dir("UCI HAR Dataset")

# Response > dir("UCI HAR Dataset")
# [1] "activity_labels.txt" "features.txt"  
# [3] "features_info.txt"   "README.txt"      #[5] "test"                "train"              


# Step 0 - get an undertanding of the files data 
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","functions"))
View(features)

activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
View(activities)

subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
View(subject_test)

x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
variable.names(x_test)

y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
View(y_test)

subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
View(subject_train)

x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
variable.names(x_train)

y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
View(y_train)


# Step 1 - now below I merge the training and the test sets to create one data set. I join two data frames (datasets) vertically by using the "rbind" and "cbind" functions. I can do this as the two data frames have the same variables.

x_combined <- rbind(x_train, x_test) # to combine x train and test combined data sets

y_combined <- rbind(y_train, y_test) # to combine y train and test combined data sets

subject_combined <- rbind(subject_train, subject_test)# to combine "subject" train and test combined data sets

Merged_Data <- cbind(subject_combined, y_combined, x_combined) # to combine x, y and subject data sets


# Step 2 - the follwing coodes are needed to extract only the measurements on the mean and standard deviation for each measurement. 

variable.names(Merged_Data)
?select # provide info about select function

tidy_data <- Merged_Data %>% select(subject, code, contains("std"),contains("mean")) # select variables that contain "std" or "mean in the description"

variable.names(tidy_data) # list alll tidy_data variables

# Step 3 - below I use descriptive activity names to name the activities in the data set.

activities # to see code and activity "description"

tidy_data$code <- activities[tidy_data$code, 2]

tidy_data$code # see tidy_data description

View(tidy_data$code)

# Step 4 Appropriately labels the data set with descriptive variable names.

?gsub

names(tidy_data)[2] = "activity"
names(tidy_data)<-gsub("Acc", "Accelerometer", names(tidy_data))
names(tidy_data)<-gsub("Gyro", "Gyroscope", names(tidy_data))
names(tidy_data)<-gsub("BodyBody", "Body", names(tidy_data))
names(tidy_data)<-gsub("Mag", "Magnitude", names(tidy_data))
names(tidy_data)<-gsub("^t", "Time", names(tidy_data))
names(tidy_data)<-gsub("^f", "Frequency", names(tidy_data))
names(tidy_data)<-gsub("tBody", "TimeBody", names(tidy_data))
names(tidy_data)<-gsub("-mean()", "Mean", names(tidy_data), ignore.case = TRUE)
names(tidy_data)<-gsub("-std()", "STD", names(tidy_data), ignore.case = TRUE)
names(tidy_data)<-gsub("-freq()", "Frequency", names(tidy_data), ignore.case = TRUE)
names(tidy_data)<-gsub("gravity", "Gravity", names(tidy_data))
names(tidy_data)<-gsub("std", "StandardDeviation", names(tidy_data))
names(tidy_data)<-gsub("Accelerometerelerometerelerometer", "Accelerometer", names(tidy_data))


variable.names(tidy_data) # to review name of the variabls after name replacement


# 5.From the data set in step 4, I create a second, independent tidy data set with the average of each variable for each activity and each subject

final_tidy_data <- tidy_data %>%

group_by(subject, activity) %>%
  
summarise_all(funs(mean))

write.table(final_tidy_data, "final_tidy_data.txt", row.name=FALSE)

